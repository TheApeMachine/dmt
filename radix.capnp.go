// Code generated by capnpc-go. DO NOT EDIT.

package dmt

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	datura "github.com/theapemachine/caramba/pkg/datura"
	strconv "strconv"
)

type RadixMessage capnp.Struct
type RadixMessage_Which uint16

const (
	RadixMessage_Which_insert      RadixMessage_Which = 0
	RadixMessage_Which_sync        RadixMessage_Which = 1
	RadixMessage_Which_proof       RadixMessage_Which = 2
	RadixMessage_Which_requestVote RadixMessage_Which = 3
	RadixMessage_Which_heartbeat   RadixMessage_Which = 4
)

func (w RadixMessage_Which) String() string {
	const s = "insertsyncproofrequestVoteheartbeat"
	switch w {
	case RadixMessage_Which_insert:
		return s[0:6]
	case RadixMessage_Which_sync:
		return s[6:10]
	case RadixMessage_Which_proof:
		return s[10:15]
	case RadixMessage_Which_requestVote:
		return s[15:26]
	case RadixMessage_Which_heartbeat:
		return s[26:35]

	}
	return "RadixMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// RadixMessage_TypeID is the unique identifier for the type RadixMessage.
const RadixMessage_TypeID = 0xc862699ecf5fc2ab

func NewRadixMessage(s *capnp.Segment) (RadixMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RadixMessage(st), err
}

func NewRootRadixMessage(s *capnp.Segment) (RadixMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RadixMessage(st), err
}

func ReadRootRadixMessage(msg *capnp.Message) (RadixMessage, error) {
	root, err := msg.Root()
	return RadixMessage(root.Struct()), err
}

func (s RadixMessage) String() string {
	str, _ := text.Marshal(0xc862699ecf5fc2ab, capnp.Struct(s))
	return str
}

func (s RadixMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixMessage) DecodeFromPtr(p capnp.Ptr) RadixMessage {
	return RadixMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s RadixMessage) Which() RadixMessage_Which {
	return RadixMessage_Which(capnp.Struct(s).Uint16(2))
}
func (s RadixMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixMessage) Type() MessageType {
	return MessageType(capnp.Struct(s).Uint16(0))
}

func (s RadixMessage) SetType(v MessageType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s RadixMessage) Insert() (InsertPayload, error) {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != insert")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return InsertPayload(p.Struct()), err
}

func (s RadixMessage) HasInsert() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixMessage) SetInsert(v InsertPayload) error {
	capnp.Struct(s).SetUint16(2, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInsert sets the insert field to a newly
// allocated InsertPayload struct, preferring placement in s's segment.
func (s RadixMessage) NewInsert() (InsertPayload, error) {
	capnp.Struct(s).SetUint16(2, 0)
	ss, err := NewInsertPayload(capnp.Struct(s).Segment())
	if err != nil {
		return InsertPayload{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RadixMessage) Sync() (SyncPayload, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != sync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SyncPayload(p.Struct()), err
}

func (s RadixMessage) HasSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixMessage) SetSync(v SyncPayload) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSync sets the sync field to a newly
// allocated SyncPayload struct, preferring placement in s's segment.
func (s RadixMessage) NewSync() (SyncPayload, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewSyncPayload(capnp.Struct(s).Segment())
	if err != nil {
		return SyncPayload{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RadixMessage) Proof() (ProofPayload, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != proof")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ProofPayload(p.Struct()), err
}

func (s RadixMessage) HasProof() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixMessage) SetProof(v ProofPayload) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewProof sets the proof field to a newly
// allocated ProofPayload struct, preferring placement in s's segment.
func (s RadixMessage) NewProof() (ProofPayload, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewProofPayload(capnp.Struct(s).Segment())
	if err != nil {
		return ProofPayload{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RadixMessage) RequestVote() (RequestVotePayload, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != requestVote")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return RequestVotePayload(p.Struct()), err
}

func (s RadixMessage) HasRequestVote() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixMessage) SetRequestVote(v RequestVotePayload) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRequestVote sets the requestVote field to a newly
// allocated RequestVotePayload struct, preferring placement in s's segment.
func (s RadixMessage) NewRequestVote() (RequestVotePayload, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewRequestVotePayload(capnp.Struct(s).Segment())
	if err != nil {
		return RequestVotePayload{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RadixMessage) Heartbeat() (HeartbeatPayload, error) {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != heartbeat")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return HeartbeatPayload(p.Struct()), err
}

func (s RadixMessage) HasHeartbeat() bool {
	if capnp.Struct(s).Uint16(2) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixMessage) SetHeartbeat(v HeartbeatPayload) error {
	capnp.Struct(s).SetUint16(2, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeartbeat sets the heartbeat field to a newly
// allocated HeartbeatPayload struct, preferring placement in s's segment.
func (s RadixMessage) NewHeartbeat() (HeartbeatPayload, error) {
	capnp.Struct(s).SetUint16(2, 4)
	ss, err := NewHeartbeatPayload(capnp.Struct(s).Segment())
	if err != nil {
		return HeartbeatPayload{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RadixMessage_List is a list of RadixMessage.
type RadixMessage_List = capnp.StructList[RadixMessage]

// NewRadixMessage creates a new list of RadixMessage.
func NewRadixMessage_List(s *capnp.Segment, sz int32) (RadixMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[RadixMessage](l), err
}

// RadixMessage_Future is a wrapper for a RadixMessage promised by a client call.
type RadixMessage_Future struct{ *capnp.Future }

func (f RadixMessage_Future) Struct() (RadixMessage, error) {
	p, err := f.Future.Ptr()
	return RadixMessage(p.Struct()), err
}
func (p RadixMessage_Future) Insert() InsertPayload_Future {
	return InsertPayload_Future{Future: p.Future.Field(0, nil)}
}
func (p RadixMessage_Future) Sync() SyncPayload_Future {
	return SyncPayload_Future{Future: p.Future.Field(0, nil)}
}
func (p RadixMessage_Future) Proof() ProofPayload_Future {
	return ProofPayload_Future{Future: p.Future.Field(0, nil)}
}
func (p RadixMessage_Future) RequestVote() RequestVotePayload_Future {
	return RequestVotePayload_Future{Future: p.Future.Field(0, nil)}
}
func (p RadixMessage_Future) Heartbeat() HeartbeatPayload_Future {
	return HeartbeatPayload_Future{Future: p.Future.Field(0, nil)}
}

type MessageType uint16

// MessageType_TypeID is the unique identifier for the type MessageType.
const MessageType_TypeID = 0xc2e5537fdc69a5ea

// Values of MessageType.
const (
	MessageType_insert      MessageType = 0
	MessageType_sync        MessageType = 1
	MessageType_proof       MessageType = 2
	MessageType_requestVote MessageType = 3
	MessageType_heartbeat   MessageType = 4
)

// String returns the enum's constant name.
func (c MessageType) String() string {
	switch c {
	case MessageType_insert:
		return "insert"
	case MessageType_sync:
		return "sync"
	case MessageType_proof:
		return "proof"
	case MessageType_requestVote:
		return "requestVote"
	case MessageType_heartbeat:
		return "heartbeat"

	default:
		return ""
	}
}

// MessageTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageTypeFromString(c string) MessageType {
	switch c {
	case "insert":
		return MessageType_insert
	case "sync":
		return MessageType_sync
	case "proof":
		return MessageType_proof
	case "requestVote":
		return MessageType_requestVote
	case "heartbeat":
		return MessageType_heartbeat

	default:
		return 0
	}
}

type MessageType_List = capnp.EnumList[MessageType]

func NewMessageType_List(s *capnp.Segment, sz int32) (MessageType_List, error) {
	return capnp.NewEnumList[MessageType](s, sz)
}

type InsertPayload capnp.Struct

// InsertPayload_TypeID is the unique identifier for the type InsertPayload.
const InsertPayload_TypeID = 0xbcb88ef4c85c3f9b

func NewInsertPayload(s *capnp.Segment) (InsertPayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return InsertPayload(st), err
}

func NewRootInsertPayload(s *capnp.Segment) (InsertPayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return InsertPayload(st), err
}

func ReadRootInsertPayload(msg *capnp.Message) (InsertPayload, error) {
	root, err := msg.Root()
	return InsertPayload(root.Struct()), err
}

func (s InsertPayload) String() string {
	str, _ := text.Marshal(0xbcb88ef4c85c3f9b, capnp.Struct(s))
	return str
}

func (s InsertPayload) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InsertPayload) DecodeFromPtr(p capnp.Ptr) InsertPayload {
	return InsertPayload(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InsertPayload) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InsertPayload) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InsertPayload) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InsertPayload) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InsertPayload) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s InsertPayload) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InsertPayload) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s InsertPayload) Artifact() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return datura.Artifact(p.Struct()), err
}

func (s InsertPayload) HasArtifact() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InsertPayload) SetArtifact(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewArtifact sets the artifact field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s InsertPayload) NewArtifact() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s InsertPayload) MerkleProof() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s InsertPayload) HasMerkleProof() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InsertPayload) SetMerkleProof(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewMerkleProof sets the merkleProof field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s InsertPayload) NewMerkleProof(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s InsertPayload) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s InsertPayload) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s InsertPayload) LogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s InsertPayload) SetLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// InsertPayload_List is a list of InsertPayload.
type InsertPayload_List = capnp.StructList[InsertPayload]

// NewInsertPayload creates a new list of InsertPayload.
func NewInsertPayload_List(s *capnp.Segment, sz int32) (InsertPayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[InsertPayload](l), err
}

// InsertPayload_Future is a wrapper for a InsertPayload promised by a client call.
type InsertPayload_Future struct{ *capnp.Future }

func (f InsertPayload_Future) Struct() (InsertPayload, error) {
	p, err := f.Future.Ptr()
	return InsertPayload(p.Struct()), err
}
func (p InsertPayload_Future) Artifact() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(1, nil)}
}

type SyncPayload capnp.Struct

// SyncPayload_TypeID is the unique identifier for the type SyncPayload.
const SyncPayload_TypeID = 0xdd8c8c4a0b384d33

func NewSyncPayload(s *capnp.Segment) (SyncPayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return SyncPayload(st), err
}

func NewRootSyncPayload(s *capnp.Segment) (SyncPayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return SyncPayload(st), err
}

func ReadRootSyncPayload(msg *capnp.Message) (SyncPayload, error) {
	root, err := msg.Root()
	return SyncPayload(root.Struct()), err
}

func (s SyncPayload) String() string {
	str, _ := text.Marshal(0xdd8c8c4a0b384d33, capnp.Struct(s))
	return str
}

func (s SyncPayload) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SyncPayload) DecodeFromPtr(p capnp.Ptr) SyncPayload {
	return SyncPayload(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SyncPayload) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SyncPayload) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SyncPayload) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SyncPayload) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SyncPayload) MerkleRoot() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SyncPayload) HasMerkleRoot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SyncPayload) SetMerkleRoot(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SyncPayload) Entries() (SyncEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SyncEntry_List(p.List()), err
}

func (s SyncPayload) HasEntries() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SyncPayload) SetEntries(v SyncEntry_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated SyncEntry_List, preferring placement in s's segment.
func (s SyncPayload) NewEntries(n int32) (SyncEntry_List, error) {
	l, err := NewSyncEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SyncEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SyncPayload) Proofs() (MerkleProof_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return MerkleProof_List(p.List()), err
}

func (s SyncPayload) HasProofs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SyncPayload) SetProofs(v MerkleProof_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewProofs sets the proofs field to a newly
// allocated MerkleProof_List, preferring placement in s's segment.
func (s SyncPayload) NewProofs(n int32) (MerkleProof_List, error) {
	l, err := NewMerkleProof_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MerkleProof_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SyncPayload) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s SyncPayload) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s SyncPayload) LogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s SyncPayload) SetLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// SyncPayload_List is a list of SyncPayload.
type SyncPayload_List = capnp.StructList[SyncPayload]

// NewSyncPayload creates a new list of SyncPayload.
func NewSyncPayload_List(s *capnp.Segment, sz int32) (SyncPayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[SyncPayload](l), err
}

// SyncPayload_Future is a wrapper for a SyncPayload promised by a client call.
type SyncPayload_Future struct{ *capnp.Future }

func (f SyncPayload_Future) Struct() (SyncPayload, error) {
	p, err := f.Future.Ptr()
	return SyncPayload(p.Struct()), err
}

type SyncEntry capnp.Struct

// SyncEntry_TypeID is the unique identifier for the type SyncEntry.
const SyncEntry_TypeID = 0x9f615a599596c7ac

func NewSyncEntry(s *capnp.Segment) (SyncEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SyncEntry(st), err
}

func NewRootSyncEntry(s *capnp.Segment) (SyncEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SyncEntry(st), err
}

func ReadRootSyncEntry(msg *capnp.Message) (SyncEntry, error) {
	root, err := msg.Root()
	return SyncEntry(root.Struct()), err
}

func (s SyncEntry) String() string {
	str, _ := text.Marshal(0x9f615a599596c7ac, capnp.Struct(s))
	return str
}

func (s SyncEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SyncEntry) DecodeFromPtr(p capnp.Ptr) SyncEntry {
	return SyncEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SyncEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SyncEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SyncEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SyncEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SyncEntry) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SyncEntry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SyncEntry) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SyncEntry) Artifact() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return datura.Artifact(p.Struct()), err
}

func (s SyncEntry) HasArtifact() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SyncEntry) SetArtifact(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewArtifact sets the artifact field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s SyncEntry) NewArtifact() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SyncEntry) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s SyncEntry) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s SyncEntry) Index() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s SyncEntry) SetIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// SyncEntry_List is a list of SyncEntry.
type SyncEntry_List = capnp.StructList[SyncEntry]

// NewSyncEntry creates a new list of SyncEntry.
func NewSyncEntry_List(s *capnp.Segment, sz int32) (SyncEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[SyncEntry](l), err
}

// SyncEntry_Future is a wrapper for a SyncEntry promised by a client call.
type SyncEntry_Future struct{ *capnp.Future }

func (f SyncEntry_Future) Struct() (SyncEntry, error) {
	p, err := f.Future.Ptr()
	return SyncEntry(p.Struct()), err
}
func (p SyncEntry_Future) Artifact() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(1, nil)}
}

type ProofPayload capnp.Struct

// ProofPayload_TypeID is the unique identifier for the type ProofPayload.
const ProofPayload_TypeID = 0xc04a2652c589ed19

func NewProofPayload(s *capnp.Segment) (ProofPayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ProofPayload(st), err
}

func NewRootProofPayload(s *capnp.Segment) (ProofPayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ProofPayload(st), err
}

func ReadRootProofPayload(msg *capnp.Message) (ProofPayload, error) {
	root, err := msg.Root()
	return ProofPayload(root.Struct()), err
}

func (s ProofPayload) String() string {
	str, _ := text.Marshal(0xc04a2652c589ed19, capnp.Struct(s))
	return str
}

func (s ProofPayload) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProofPayload) DecodeFromPtr(p capnp.Ptr) ProofPayload {
	return ProofPayload(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProofPayload) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProofPayload) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProofPayload) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProofPayload) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProofPayload) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ProofPayload) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProofPayload) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s ProofPayload) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s ProofPayload) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ProofPayload) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s ProofPayload) Proof() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s ProofPayload) HasProof() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ProofPayload) SetProof(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewProof sets the proof field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s ProofPayload) NewProof(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// ProofPayload_List is a list of ProofPayload.
type ProofPayload_List = capnp.StructList[ProofPayload]

// NewProofPayload creates a new list of ProofPayload.
func NewProofPayload_List(s *capnp.Segment, sz int32) (ProofPayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ProofPayload](l), err
}

// ProofPayload_Future is a wrapper for a ProofPayload promised by a client call.
type ProofPayload_Future struct{ *capnp.Future }

func (f ProofPayload_Future) Struct() (ProofPayload, error) {
	p, err := f.Future.Ptr()
	return ProofPayload(p.Struct()), err
}

type MerkleProof capnp.Struct

// MerkleProof_TypeID is the unique identifier for the type MerkleProof.
const MerkleProof_TypeID = 0xcf62a4e22505dded

func NewMerkleProof(s *capnp.Segment) (MerkleProof, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MerkleProof(st), err
}

func NewRootMerkleProof(s *capnp.Segment) (MerkleProof, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MerkleProof(st), err
}

func ReadRootMerkleProof(msg *capnp.Message) (MerkleProof, error) {
	root, err := msg.Root()
	return MerkleProof(root.Struct()), err
}

func (s MerkleProof) String() string {
	str, _ := text.Marshal(0xcf62a4e22505dded, capnp.Struct(s))
	return str
}

func (s MerkleProof) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerkleProof) DecodeFromPtr(p capnp.Ptr) MerkleProof {
	return MerkleProof(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerkleProof) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerkleProof) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerkleProof) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerkleProof) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerkleProof) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s MerkleProof) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MerkleProof) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s MerkleProof) Proof() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s MerkleProof) HasProof() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MerkleProof) SetProof(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewProof sets the proof field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s MerkleProof) NewProof(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// MerkleProof_List is a list of MerkleProof.
type MerkleProof_List = capnp.StructList[MerkleProof]

// NewMerkleProof creates a new list of MerkleProof.
func NewMerkleProof_List(s *capnp.Segment, sz int32) (MerkleProof_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[MerkleProof](l), err
}

// MerkleProof_Future is a wrapper for a MerkleProof promised by a client call.
type MerkleProof_Future struct{ *capnp.Future }

func (f MerkleProof_Future) Struct() (MerkleProof, error) {
	p, err := f.Future.Ptr()
	return MerkleProof(p.Struct()), err
}

type RecoverPayload capnp.Struct

// RecoverPayload_TypeID is the unique identifier for the type RecoverPayload.
const RecoverPayload_TypeID = 0xba0e90e0ec3446c8

func NewRecoverPayload(s *capnp.Segment) (RecoverPayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RecoverPayload(st), err
}

func NewRootRecoverPayload(s *capnp.Segment) (RecoverPayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RecoverPayload(st), err
}

func ReadRootRecoverPayload(msg *capnp.Message) (RecoverPayload, error) {
	root, err := msg.Root()
	return RecoverPayload(root.Struct()), err
}

func (s RecoverPayload) String() string {
	str, _ := text.Marshal(0xba0e90e0ec3446c8, capnp.Struct(s))
	return str
}

func (s RecoverPayload) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecoverPayload) DecodeFromPtr(p capnp.Ptr) RecoverPayload {
	return RecoverPayload(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecoverPayload) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecoverPayload) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecoverPayload) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecoverPayload) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecoverPayload) LastKnownMerkleRoot() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RecoverPayload) HasLastKnownMerkleRoot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RecoverPayload) SetLastKnownMerkleRoot(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// RecoverPayload_List is a list of RecoverPayload.
type RecoverPayload_List = capnp.StructList[RecoverPayload]

// NewRecoverPayload creates a new list of RecoverPayload.
func NewRecoverPayload_List(s *capnp.Segment, sz int32) (RecoverPayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RecoverPayload](l), err
}

// RecoverPayload_Future is a wrapper for a RecoverPayload promised by a client call.
type RecoverPayload_Future struct{ *capnp.Future }

func (f RecoverPayload_Future) Struct() (RecoverPayload, error) {
	p, err := f.Future.Ptr()
	return RecoverPayload(p.Struct()), err
}

type RequestVotePayload capnp.Struct

// RequestVotePayload_TypeID is the unique identifier for the type RequestVotePayload.
const RequestVotePayload_TypeID = 0x87dc497b74802fd5

func NewRequestVotePayload(s *capnp.Segment) (RequestVotePayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RequestVotePayload(st), err
}

func NewRootRequestVotePayload(s *capnp.Segment) (RequestVotePayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RequestVotePayload(st), err
}

func ReadRootRequestVotePayload(msg *capnp.Message) (RequestVotePayload, error) {
	root, err := msg.Root()
	return RequestVotePayload(root.Struct()), err
}

func (s RequestVotePayload) String() string {
	str, _ := text.Marshal(0x87dc497b74802fd5, capnp.Struct(s))
	return str
}

func (s RequestVotePayload) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RequestVotePayload) DecodeFromPtr(p capnp.Ptr) RequestVotePayload {
	return RequestVotePayload(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RequestVotePayload) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RequestVotePayload) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RequestVotePayload) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RequestVotePayload) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RequestVotePayload) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RequestVotePayload) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RequestVotePayload) CandidateId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RequestVotePayload) HasCandidateId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RequestVotePayload) CandidateIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RequestVotePayload) SetCandidateId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RequestVotePayload) LastLogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RequestVotePayload) SetLastLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RequestVotePayload) LastLogTerm() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RequestVotePayload) SetLastLogTerm(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

// RequestVotePayload_List is a list of RequestVotePayload.
type RequestVotePayload_List = capnp.StructList[RequestVotePayload]

// NewRequestVotePayload creates a new list of RequestVotePayload.
func NewRequestVotePayload_List(s *capnp.Segment, sz int32) (RequestVotePayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RequestVotePayload](l), err
}

// RequestVotePayload_Future is a wrapper for a RequestVotePayload promised by a client call.
type RequestVotePayload_Future struct{ *capnp.Future }

func (f RequestVotePayload_Future) Struct() (RequestVotePayload, error) {
	p, err := f.Future.Ptr()
	return RequestVotePayload(p.Struct()), err
}

type HeartbeatPayload capnp.Struct

// HeartbeatPayload_TypeID is the unique identifier for the type HeartbeatPayload.
const HeartbeatPayload_TypeID = 0xc0a2a634995e52fd

func NewHeartbeatPayload(s *capnp.Segment) (HeartbeatPayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HeartbeatPayload(st), err
}

func NewRootHeartbeatPayload(s *capnp.Segment) (HeartbeatPayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HeartbeatPayload(st), err
}

func ReadRootHeartbeatPayload(msg *capnp.Message) (HeartbeatPayload, error) {
	root, err := msg.Root()
	return HeartbeatPayload(root.Struct()), err
}

func (s HeartbeatPayload) String() string {
	str, _ := text.Marshal(0xc0a2a634995e52fd, capnp.Struct(s))
	return str
}

func (s HeartbeatPayload) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HeartbeatPayload) DecodeFromPtr(p capnp.Ptr) HeartbeatPayload {
	return HeartbeatPayload(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HeartbeatPayload) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HeartbeatPayload) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HeartbeatPayload) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HeartbeatPayload) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HeartbeatPayload) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s HeartbeatPayload) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s HeartbeatPayload) LeaderId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HeartbeatPayload) HasLeaderId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HeartbeatPayload) LeaderIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HeartbeatPayload) SetLeaderId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HeartbeatPayload_List is a list of HeartbeatPayload.
type HeartbeatPayload_List = capnp.StructList[HeartbeatPayload]

// NewHeartbeatPayload creates a new list of HeartbeatPayload.
func NewHeartbeatPayload_List(s *capnp.Segment, sz int32) (HeartbeatPayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HeartbeatPayload](l), err
}

// HeartbeatPayload_Future is a wrapper for a HeartbeatPayload promised by a client call.
type HeartbeatPayload_Future struct{ *capnp.Future }

func (f HeartbeatPayload_Future) Struct() (HeartbeatPayload, error) {
	p, err := f.Future.Ptr()
	return HeartbeatPayload(p.Struct()), err
}

type RadixRPC capnp.Client

// RadixRPC_TypeID is the unique identifier for the type RadixRPC.
const RadixRPC_TypeID = 0xd39c0255f77a7458

func (c RadixRPC) Insert(ctx context.Context, params func(RadixRPC_insert_Params) error) (RadixRPC_insert_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      0,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "insert",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RadixRPC_insert_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RadixRPC_insert_Results_Future{Future: ans.Future()}, release

}

func (c RadixRPC) Sync(ctx context.Context, params func(RadixRPC_sync_Params) error) (RadixRPC_sync_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      1,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "sync",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RadixRPC_sync_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RadixRPC_sync_Results_Future{Future: ans.Future()}, release

}

func (c RadixRPC) Recover(ctx context.Context, params func(RadixRPC_recover_Params) error) (RadixRPC_recover_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      2,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "recover",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RadixRPC_recover_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RadixRPC_recover_Results_Future{Future: ans.Future()}, release

}

func (c RadixRPC) RequestVote(ctx context.Context, params func(RadixRPC_requestVote_Params) error) (RadixRPC_requestVote_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      3,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "requestVote",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 24, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RadixRPC_requestVote_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RadixRPC_requestVote_Results_Future{Future: ans.Future()}, release

}

func (c RadixRPC) Heartbeat(ctx context.Context, params func(RadixRPC_heartbeat_Params) error) (RadixRPC_heartbeat_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      4,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "heartbeat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RadixRPC_heartbeat_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RadixRPC_heartbeat_Results_Future{Future: ans.Future()}, release

}

func (c RadixRPC) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RadixRPC) String() string {
	return "RadixRPC(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RadixRPC) AddRef() RadixRPC {
	return RadixRPC(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RadixRPC) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RadixRPC) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RadixRPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RadixRPC) DecodeFromPtr(p capnp.Ptr) RadixRPC {
	return RadixRPC(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RadixRPC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RadixRPC) IsSame(other RadixRPC) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RadixRPC) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RadixRPC) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RadixRPC_Server is a RadixRPC with a local implementation.
type RadixRPC_Server interface {
	Insert(context.Context, RadixRPC_insert) error

	Sync(context.Context, RadixRPC_sync) error

	Recover(context.Context, RadixRPC_recover) error

	RequestVote(context.Context, RadixRPC_requestVote) error

	Heartbeat(context.Context, RadixRPC_heartbeat) error
}

// RadixRPC_NewServer creates a new Server from an implementation of RadixRPC_Server.
func RadixRPC_NewServer(s RadixRPC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RadixRPC_Methods(nil, s), s, c)
}

// RadixRPC_ServerToClient creates a new Client from an implementation of RadixRPC_Server.
// The caller is responsible for calling Release on the returned Client.
func RadixRPC_ServerToClient(s RadixRPC_Server) RadixRPC {
	return RadixRPC(capnp.NewClient(RadixRPC_NewServer(s)))
}

// RadixRPC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RadixRPC_Methods(methods []server.Method, s RadixRPC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      0,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "insert",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Insert(ctx, RadixRPC_insert{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      1,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "sync",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sync(ctx, RadixRPC_sync{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      2,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "recover",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Recover(ctx, RadixRPC_recover{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      3,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "requestVote",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RequestVote(ctx, RadixRPC_requestVote{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39c0255f77a7458,
			MethodID:      4,
			InterfaceName: "pkg/radix/radix.capnp:RadixRPC",
			MethodName:    "heartbeat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Heartbeat(ctx, RadixRPC_heartbeat{call})
		},
	})

	return methods
}

// RadixRPC_insert holds the state for a server call to RadixRPC.insert.
// See server.Call for documentation.
type RadixRPC_insert struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RadixRPC_insert) Args() RadixRPC_insert_Params {
	return RadixRPC_insert_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RadixRPC_insert) AllocResults() (RadixRPC_insert_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RadixRPC_insert_Results(r), err
}

// RadixRPC_sync holds the state for a server call to RadixRPC.sync.
// See server.Call for documentation.
type RadixRPC_sync struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RadixRPC_sync) Args() RadixRPC_sync_Params {
	return RadixRPC_sync_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RadixRPC_sync) AllocResults() (RadixRPC_sync_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RadixRPC_sync_Results(r), err
}

// RadixRPC_recover holds the state for a server call to RadixRPC.recover.
// See server.Call for documentation.
type RadixRPC_recover struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RadixRPC_recover) Args() RadixRPC_recover_Params {
	return RadixRPC_recover_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RadixRPC_recover) AllocResults() (RadixRPC_recover_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RadixRPC_recover_Results(r), err
}

// RadixRPC_requestVote holds the state for a server call to RadixRPC.requestVote.
// See server.Call for documentation.
type RadixRPC_requestVote struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RadixRPC_requestVote) Args() RadixRPC_requestVote_Params {
	return RadixRPC_requestVote_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RadixRPC_requestVote) AllocResults() (RadixRPC_requestVote_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RadixRPC_requestVote_Results(r), err
}

// RadixRPC_heartbeat holds the state for a server call to RadixRPC.heartbeat.
// See server.Call for documentation.
type RadixRPC_heartbeat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RadixRPC_heartbeat) Args() RadixRPC_heartbeat_Params {
	return RadixRPC_heartbeat_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RadixRPC_heartbeat) AllocResults() (RadixRPC_heartbeat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RadixRPC_heartbeat_Results(r), err
}

// RadixRPC_List is a list of RadixRPC.
type RadixRPC_List = capnp.CapList[RadixRPC]

// NewRadixRPC_List creates a new list of RadixRPC.
func NewRadixRPC_List(s *capnp.Segment, sz int32) (RadixRPC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RadixRPC](l), err
}

type RadixRPC_insert_Params capnp.Struct

// RadixRPC_insert_Params_TypeID is the unique identifier for the type RadixRPC_insert_Params.
const RadixRPC_insert_Params_TypeID = 0x92cee86deda862cc

func NewRadixRPC_insert_Params(s *capnp.Segment) (RadixRPC_insert_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RadixRPC_insert_Params(st), err
}

func NewRootRadixRPC_insert_Params(s *capnp.Segment) (RadixRPC_insert_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RadixRPC_insert_Params(st), err
}

func ReadRootRadixRPC_insert_Params(msg *capnp.Message) (RadixRPC_insert_Params, error) {
	root, err := msg.Root()
	return RadixRPC_insert_Params(root.Struct()), err
}

func (s RadixRPC_insert_Params) String() string {
	str, _ := text.Marshal(0x92cee86deda862cc, capnp.Struct(s))
	return str
}

func (s RadixRPC_insert_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_insert_Params) DecodeFromPtr(p capnp.Ptr) RadixRPC_insert_Params {
	return RadixRPC_insert_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_insert_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_insert_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_insert_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_insert_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_insert_Params) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RadixRPC_insert_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixRPC_insert_Params) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s RadixRPC_insert_Params) Artifact() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return datura.Artifact(p.Struct()), err
}

func (s RadixRPC_insert_Params) HasArtifact() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RadixRPC_insert_Params) SetArtifact(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewArtifact sets the artifact field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s RadixRPC_insert_Params) NewArtifact() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RadixRPC_insert_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RadixRPC_insert_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RadixRPC_insert_Params) LogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RadixRPC_insert_Params) SetLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// RadixRPC_insert_Params_List is a list of RadixRPC_insert_Params.
type RadixRPC_insert_Params_List = capnp.StructList[RadixRPC_insert_Params]

// NewRadixRPC_insert_Params creates a new list of RadixRPC_insert_Params.
func NewRadixRPC_insert_Params_List(s *capnp.Segment, sz int32) (RadixRPC_insert_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[RadixRPC_insert_Params](l), err
}

// RadixRPC_insert_Params_Future is a wrapper for a RadixRPC_insert_Params promised by a client call.
type RadixRPC_insert_Params_Future struct{ *capnp.Future }

func (f RadixRPC_insert_Params_Future) Struct() (RadixRPC_insert_Params, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_insert_Params(p.Struct()), err
}
func (p RadixRPC_insert_Params_Future) Artifact() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(1, nil)}
}

type RadixRPC_insert_Results capnp.Struct

// RadixRPC_insert_Results_TypeID is the unique identifier for the type RadixRPC_insert_Results.
const RadixRPC_insert_Results_TypeID = 0x9a850e85044ff37d

func NewRadixRPC_insert_Results(s *capnp.Segment) (RadixRPC_insert_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RadixRPC_insert_Results(st), err
}

func NewRootRadixRPC_insert_Results(s *capnp.Segment) (RadixRPC_insert_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RadixRPC_insert_Results(st), err
}

func ReadRootRadixRPC_insert_Results(msg *capnp.Message) (RadixRPC_insert_Results, error) {
	root, err := msg.Root()
	return RadixRPC_insert_Results(root.Struct()), err
}

func (s RadixRPC_insert_Results) String() string {
	str, _ := text.Marshal(0x9a850e85044ff37d, capnp.Struct(s))
	return str
}

func (s RadixRPC_insert_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_insert_Results) DecodeFromPtr(p capnp.Ptr) RadixRPC_insert_Results {
	return RadixRPC_insert_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_insert_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_insert_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_insert_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_insert_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_insert_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s RadixRPC_insert_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s RadixRPC_insert_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RadixRPC_insert_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RadixRPC_insert_Results) LogIndex() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RadixRPC_insert_Results) SetLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

// RadixRPC_insert_Results_List is a list of RadixRPC_insert_Results.
type RadixRPC_insert_Results_List = capnp.StructList[RadixRPC_insert_Results]

// NewRadixRPC_insert_Results creates a new list of RadixRPC_insert_Results.
func NewRadixRPC_insert_Results_List(s *capnp.Segment, sz int32) (RadixRPC_insert_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[RadixRPC_insert_Results](l), err
}

// RadixRPC_insert_Results_Future is a wrapper for a RadixRPC_insert_Results promised by a client call.
type RadixRPC_insert_Results_Future struct{ *capnp.Future }

func (f RadixRPC_insert_Results_Future) Struct() (RadixRPC_insert_Results, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_insert_Results(p.Struct()), err
}

type RadixRPC_sync_Params capnp.Struct

// RadixRPC_sync_Params_TypeID is the unique identifier for the type RadixRPC_sync_Params.
const RadixRPC_sync_Params_TypeID = 0xb5b6823f91950fef

func NewRadixRPC_sync_Params(s *capnp.Segment) (RadixRPC_sync_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RadixRPC_sync_Params(st), err
}

func NewRootRadixRPC_sync_Params(s *capnp.Segment) (RadixRPC_sync_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RadixRPC_sync_Params(st), err
}

func ReadRootRadixRPC_sync_Params(msg *capnp.Message) (RadixRPC_sync_Params, error) {
	root, err := msg.Root()
	return RadixRPC_sync_Params(root.Struct()), err
}

func (s RadixRPC_sync_Params) String() string {
	str, _ := text.Marshal(0xb5b6823f91950fef, capnp.Struct(s))
	return str
}

func (s RadixRPC_sync_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_sync_Params) DecodeFromPtr(p capnp.Ptr) RadixRPC_sync_Params {
	return RadixRPC_sync_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_sync_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_sync_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_sync_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_sync_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_sync_Params) MerkleRoot() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RadixRPC_sync_Params) HasMerkleRoot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixRPC_sync_Params) SetMerkleRoot(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s RadixRPC_sync_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RadixRPC_sync_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RadixRPC_sync_Params) LogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RadixRPC_sync_Params) SetLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// RadixRPC_sync_Params_List is a list of RadixRPC_sync_Params.
type RadixRPC_sync_Params_List = capnp.StructList[RadixRPC_sync_Params]

// NewRadixRPC_sync_Params creates a new list of RadixRPC_sync_Params.
func NewRadixRPC_sync_Params_List(s *capnp.Segment, sz int32) (RadixRPC_sync_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RadixRPC_sync_Params](l), err
}

// RadixRPC_sync_Params_Future is a wrapper for a RadixRPC_sync_Params promised by a client call.
type RadixRPC_sync_Params_Future struct{ *capnp.Future }

func (f RadixRPC_sync_Params_Future) Struct() (RadixRPC_sync_Params, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_sync_Params(p.Struct()), err
}

type RadixRPC_sync_Results capnp.Struct

// RadixRPC_sync_Results_TypeID is the unique identifier for the type RadixRPC_sync_Results.
const RadixRPC_sync_Results_TypeID = 0x9a3cd5e6e6dd806a

func NewRadixRPC_sync_Results(s *capnp.Segment) (RadixRPC_sync_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RadixRPC_sync_Results(st), err
}

func NewRootRadixRPC_sync_Results(s *capnp.Segment) (RadixRPC_sync_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RadixRPC_sync_Results(st), err
}

func ReadRootRadixRPC_sync_Results(msg *capnp.Message) (RadixRPC_sync_Results, error) {
	root, err := msg.Root()
	return RadixRPC_sync_Results(root.Struct()), err
}

func (s RadixRPC_sync_Results) String() string {
	str, _ := text.Marshal(0x9a3cd5e6e6dd806a, capnp.Struct(s))
	return str
}

func (s RadixRPC_sync_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_sync_Results) DecodeFromPtr(p capnp.Ptr) RadixRPC_sync_Results {
	return RadixRPC_sync_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_sync_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_sync_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_sync_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_sync_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_sync_Results) Diff() (SyncPayload, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SyncPayload(p.Struct()), err
}

func (s RadixRPC_sync_Results) HasDiff() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixRPC_sync_Results) SetDiff(v SyncPayload) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDiff sets the diff field to a newly
// allocated SyncPayload struct, preferring placement in s's segment.
func (s RadixRPC_sync_Results) NewDiff() (SyncPayload, error) {
	ss, err := NewSyncPayload(capnp.Struct(s).Segment())
	if err != nil {
		return SyncPayload{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RadixRPC_sync_Results_List is a list of RadixRPC_sync_Results.
type RadixRPC_sync_Results_List = capnp.StructList[RadixRPC_sync_Results]

// NewRadixRPC_sync_Results creates a new list of RadixRPC_sync_Results.
func NewRadixRPC_sync_Results_List(s *capnp.Segment, sz int32) (RadixRPC_sync_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RadixRPC_sync_Results](l), err
}

// RadixRPC_sync_Results_Future is a wrapper for a RadixRPC_sync_Results promised by a client call.
type RadixRPC_sync_Results_Future struct{ *capnp.Future }

func (f RadixRPC_sync_Results_Future) Struct() (RadixRPC_sync_Results, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_sync_Results(p.Struct()), err
}
func (p RadixRPC_sync_Results_Future) Diff() SyncPayload_Future {
	return SyncPayload_Future{Future: p.Future.Field(0, nil)}
}

type RadixRPC_recover_Params capnp.Struct

// RadixRPC_recover_Params_TypeID is the unique identifier for the type RadixRPC_recover_Params.
const RadixRPC_recover_Params_TypeID = 0xbd2b063ad7da0cf6

func NewRadixRPC_recover_Params(s *capnp.Segment) (RadixRPC_recover_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RadixRPC_recover_Params(st), err
}

func NewRootRadixRPC_recover_Params(s *capnp.Segment) (RadixRPC_recover_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RadixRPC_recover_Params(st), err
}

func ReadRootRadixRPC_recover_Params(msg *capnp.Message) (RadixRPC_recover_Params, error) {
	root, err := msg.Root()
	return RadixRPC_recover_Params(root.Struct()), err
}

func (s RadixRPC_recover_Params) String() string {
	str, _ := text.Marshal(0xbd2b063ad7da0cf6, capnp.Struct(s))
	return str
}

func (s RadixRPC_recover_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_recover_Params) DecodeFromPtr(p capnp.Ptr) RadixRPC_recover_Params {
	return RadixRPC_recover_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_recover_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_recover_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_recover_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_recover_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_recover_Params) LastKnownMerkleRoot() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RadixRPC_recover_Params) HasLastKnownMerkleRoot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixRPC_recover_Params) SetLastKnownMerkleRoot(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s RadixRPC_recover_Params) LastTerm() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RadixRPC_recover_Params) SetLastTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RadixRPC_recover_Params) LastLogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RadixRPC_recover_Params) SetLastLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// RadixRPC_recover_Params_List is a list of RadixRPC_recover_Params.
type RadixRPC_recover_Params_List = capnp.StructList[RadixRPC_recover_Params]

// NewRadixRPC_recover_Params creates a new list of RadixRPC_recover_Params.
func NewRadixRPC_recover_Params_List(s *capnp.Segment, sz int32) (RadixRPC_recover_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RadixRPC_recover_Params](l), err
}

// RadixRPC_recover_Params_Future is a wrapper for a RadixRPC_recover_Params promised by a client call.
type RadixRPC_recover_Params_Future struct{ *capnp.Future }

func (f RadixRPC_recover_Params_Future) Struct() (RadixRPC_recover_Params, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_recover_Params(p.Struct()), err
}

type RadixRPC_recover_Results capnp.Struct

// RadixRPC_recover_Results_TypeID is the unique identifier for the type RadixRPC_recover_Results.
const RadixRPC_recover_Results_TypeID = 0x92270091f1fd78bf

func NewRadixRPC_recover_Results(s *capnp.Segment) (RadixRPC_recover_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RadixRPC_recover_Results(st), err
}

func NewRootRadixRPC_recover_Results(s *capnp.Segment) (RadixRPC_recover_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RadixRPC_recover_Results(st), err
}

func ReadRootRadixRPC_recover_Results(msg *capnp.Message) (RadixRPC_recover_Results, error) {
	root, err := msg.Root()
	return RadixRPC_recover_Results(root.Struct()), err
}

func (s RadixRPC_recover_Results) String() string {
	str, _ := text.Marshal(0x92270091f1fd78bf, capnp.Struct(s))
	return str
}

func (s RadixRPC_recover_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_recover_Results) DecodeFromPtr(p capnp.Ptr) RadixRPC_recover_Results {
	return RadixRPC_recover_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_recover_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_recover_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_recover_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_recover_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_recover_Results) State() (SyncPayload, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SyncPayload(p.Struct()), err
}

func (s RadixRPC_recover_Results) HasState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixRPC_recover_Results) SetState(v SyncPayload) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewState sets the state field to a newly
// allocated SyncPayload struct, preferring placement in s's segment.
func (s RadixRPC_recover_Results) NewState() (SyncPayload, error) {
	ss, err := NewSyncPayload(capnp.Struct(s).Segment())
	if err != nil {
		return SyncPayload{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RadixRPC_recover_Results_List is a list of RadixRPC_recover_Results.
type RadixRPC_recover_Results_List = capnp.StructList[RadixRPC_recover_Results]

// NewRadixRPC_recover_Results creates a new list of RadixRPC_recover_Results.
func NewRadixRPC_recover_Results_List(s *capnp.Segment, sz int32) (RadixRPC_recover_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RadixRPC_recover_Results](l), err
}

// RadixRPC_recover_Results_Future is a wrapper for a RadixRPC_recover_Results promised by a client call.
type RadixRPC_recover_Results_Future struct{ *capnp.Future }

func (f RadixRPC_recover_Results_Future) Struct() (RadixRPC_recover_Results, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_recover_Results(p.Struct()), err
}
func (p RadixRPC_recover_Results_Future) State() SyncPayload_Future {
	return SyncPayload_Future{Future: p.Future.Field(0, nil)}
}

type RadixRPC_requestVote_Params capnp.Struct

// RadixRPC_requestVote_Params_TypeID is the unique identifier for the type RadixRPC_requestVote_Params.
const RadixRPC_requestVote_Params_TypeID = 0xf4e2127182ed3ab2

func NewRadixRPC_requestVote_Params(s *capnp.Segment) (RadixRPC_requestVote_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RadixRPC_requestVote_Params(st), err
}

func NewRootRadixRPC_requestVote_Params(s *capnp.Segment) (RadixRPC_requestVote_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RadixRPC_requestVote_Params(st), err
}

func ReadRootRadixRPC_requestVote_Params(msg *capnp.Message) (RadixRPC_requestVote_Params, error) {
	root, err := msg.Root()
	return RadixRPC_requestVote_Params(root.Struct()), err
}

func (s RadixRPC_requestVote_Params) String() string {
	str, _ := text.Marshal(0xf4e2127182ed3ab2, capnp.Struct(s))
	return str
}

func (s RadixRPC_requestVote_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_requestVote_Params) DecodeFromPtr(p capnp.Ptr) RadixRPC_requestVote_Params {
	return RadixRPC_requestVote_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_requestVote_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_requestVote_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_requestVote_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_requestVote_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_requestVote_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RadixRPC_requestVote_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RadixRPC_requestVote_Params) CandidateId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RadixRPC_requestVote_Params) HasCandidateId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixRPC_requestVote_Params) CandidateIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RadixRPC_requestVote_Params) SetCandidateId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RadixRPC_requestVote_Params) LastLogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RadixRPC_requestVote_Params) SetLastLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RadixRPC_requestVote_Params) LastLogTerm() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RadixRPC_requestVote_Params) SetLastLogTerm(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

// RadixRPC_requestVote_Params_List is a list of RadixRPC_requestVote_Params.
type RadixRPC_requestVote_Params_List = capnp.StructList[RadixRPC_requestVote_Params]

// NewRadixRPC_requestVote_Params creates a new list of RadixRPC_requestVote_Params.
func NewRadixRPC_requestVote_Params_List(s *capnp.Segment, sz int32) (RadixRPC_requestVote_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RadixRPC_requestVote_Params](l), err
}

// RadixRPC_requestVote_Params_Future is a wrapper for a RadixRPC_requestVote_Params promised by a client call.
type RadixRPC_requestVote_Params_Future struct{ *capnp.Future }

func (f RadixRPC_requestVote_Params_Future) Struct() (RadixRPC_requestVote_Params, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_requestVote_Params(p.Struct()), err
}

type RadixRPC_requestVote_Results capnp.Struct

// RadixRPC_requestVote_Results_TypeID is the unique identifier for the type RadixRPC_requestVote_Results.
const RadixRPC_requestVote_Results_TypeID = 0x9341b129de55668a

func NewRadixRPC_requestVote_Results(s *capnp.Segment) (RadixRPC_requestVote_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RadixRPC_requestVote_Results(st), err
}

func NewRootRadixRPC_requestVote_Results(s *capnp.Segment) (RadixRPC_requestVote_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RadixRPC_requestVote_Results(st), err
}

func ReadRootRadixRPC_requestVote_Results(msg *capnp.Message) (RadixRPC_requestVote_Results, error) {
	root, err := msg.Root()
	return RadixRPC_requestVote_Results(root.Struct()), err
}

func (s RadixRPC_requestVote_Results) String() string {
	str, _ := text.Marshal(0x9341b129de55668a, capnp.Struct(s))
	return str
}

func (s RadixRPC_requestVote_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_requestVote_Results) DecodeFromPtr(p capnp.Ptr) RadixRPC_requestVote_Results {
	return RadixRPC_requestVote_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_requestVote_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_requestVote_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_requestVote_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_requestVote_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_requestVote_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RadixRPC_requestVote_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RadixRPC_requestVote_Results) VoteGranted() bool {
	return capnp.Struct(s).Bit(64)
}

func (s RadixRPC_requestVote_Results) SetVoteGranted(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// RadixRPC_requestVote_Results_List is a list of RadixRPC_requestVote_Results.
type RadixRPC_requestVote_Results_List = capnp.StructList[RadixRPC_requestVote_Results]

// NewRadixRPC_requestVote_Results creates a new list of RadixRPC_requestVote_Results.
func NewRadixRPC_requestVote_Results_List(s *capnp.Segment, sz int32) (RadixRPC_requestVote_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[RadixRPC_requestVote_Results](l), err
}

// RadixRPC_requestVote_Results_Future is a wrapper for a RadixRPC_requestVote_Results promised by a client call.
type RadixRPC_requestVote_Results_Future struct{ *capnp.Future }

func (f RadixRPC_requestVote_Results_Future) Struct() (RadixRPC_requestVote_Results, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_requestVote_Results(p.Struct()), err
}

type RadixRPC_heartbeat_Params capnp.Struct

// RadixRPC_heartbeat_Params_TypeID is the unique identifier for the type RadixRPC_heartbeat_Params.
const RadixRPC_heartbeat_Params_TypeID = 0xb9f42084e1d12895

func NewRadixRPC_heartbeat_Params(s *capnp.Segment) (RadixRPC_heartbeat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RadixRPC_heartbeat_Params(st), err
}

func NewRootRadixRPC_heartbeat_Params(s *capnp.Segment) (RadixRPC_heartbeat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RadixRPC_heartbeat_Params(st), err
}

func ReadRootRadixRPC_heartbeat_Params(msg *capnp.Message) (RadixRPC_heartbeat_Params, error) {
	root, err := msg.Root()
	return RadixRPC_heartbeat_Params(root.Struct()), err
}

func (s RadixRPC_heartbeat_Params) String() string {
	str, _ := text.Marshal(0xb9f42084e1d12895, capnp.Struct(s))
	return str
}

func (s RadixRPC_heartbeat_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_heartbeat_Params) DecodeFromPtr(p capnp.Ptr) RadixRPC_heartbeat_Params {
	return RadixRPC_heartbeat_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_heartbeat_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_heartbeat_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_heartbeat_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_heartbeat_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_heartbeat_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RadixRPC_heartbeat_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RadixRPC_heartbeat_Params) LeaderId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RadixRPC_heartbeat_Params) HasLeaderId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadixRPC_heartbeat_Params) LeaderIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RadixRPC_heartbeat_Params) SetLeaderId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RadixRPC_heartbeat_Params_List is a list of RadixRPC_heartbeat_Params.
type RadixRPC_heartbeat_Params_List = capnp.StructList[RadixRPC_heartbeat_Params]

// NewRadixRPC_heartbeat_Params creates a new list of RadixRPC_heartbeat_Params.
func NewRadixRPC_heartbeat_Params_List(s *capnp.Segment, sz int32) (RadixRPC_heartbeat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[RadixRPC_heartbeat_Params](l), err
}

// RadixRPC_heartbeat_Params_Future is a wrapper for a RadixRPC_heartbeat_Params promised by a client call.
type RadixRPC_heartbeat_Params_Future struct{ *capnp.Future }

func (f RadixRPC_heartbeat_Params_Future) Struct() (RadixRPC_heartbeat_Params, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_heartbeat_Params(p.Struct()), err
}

type RadixRPC_heartbeat_Results capnp.Struct

// RadixRPC_heartbeat_Results_TypeID is the unique identifier for the type RadixRPC_heartbeat_Results.
const RadixRPC_heartbeat_Results_TypeID = 0xaa667e07f4900194

func NewRadixRPC_heartbeat_Results(s *capnp.Segment) (RadixRPC_heartbeat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RadixRPC_heartbeat_Results(st), err
}

func NewRootRadixRPC_heartbeat_Results(s *capnp.Segment) (RadixRPC_heartbeat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RadixRPC_heartbeat_Results(st), err
}

func ReadRootRadixRPC_heartbeat_Results(msg *capnp.Message) (RadixRPC_heartbeat_Results, error) {
	root, err := msg.Root()
	return RadixRPC_heartbeat_Results(root.Struct()), err
}

func (s RadixRPC_heartbeat_Results) String() string {
	str, _ := text.Marshal(0xaa667e07f4900194, capnp.Struct(s))
	return str
}

func (s RadixRPC_heartbeat_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadixRPC_heartbeat_Results) DecodeFromPtr(p capnp.Ptr) RadixRPC_heartbeat_Results {
	return RadixRPC_heartbeat_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadixRPC_heartbeat_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadixRPC_heartbeat_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadixRPC_heartbeat_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadixRPC_heartbeat_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadixRPC_heartbeat_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RadixRPC_heartbeat_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RadixRPC_heartbeat_Results) Success() bool {
	return capnp.Struct(s).Bit(64)
}

func (s RadixRPC_heartbeat_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// RadixRPC_heartbeat_Results_List is a list of RadixRPC_heartbeat_Results.
type RadixRPC_heartbeat_Results_List = capnp.StructList[RadixRPC_heartbeat_Results]

// NewRadixRPC_heartbeat_Results creates a new list of RadixRPC_heartbeat_Results.
func NewRadixRPC_heartbeat_Results_List(s *capnp.Segment, sz int32) (RadixRPC_heartbeat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[RadixRPC_heartbeat_Results](l), err
}

// RadixRPC_heartbeat_Results_Future is a wrapper for a RadixRPC_heartbeat_Results promised by a client call.
type RadixRPC_heartbeat_Results_Future struct{ *capnp.Future }

func (f RadixRPC_heartbeat_Results_Future) Struct() (RadixRPC_heartbeat_Results, error) {
	p, err := f.Future.Ptr()
	return RadixRPC_heartbeat_Results(p.Struct()), err
}

const schema_d3c5d01f75666abd = "x\xda\xd4Wml\x1cW\x15\xbd\xe7\xbd]\x8f\xedz" +
	"?\xc6k\"ZQ\x99F1m\\\xdc\x0f'\x91Z" +
	"\x0b\xc9nhhmb\xb1o\x9b\xd0$\x0a\xa0\xb1w" +
	"\xecl\xe2\xdduf\xc6\xa9\xb7\xb48D\xb5h\xab\x08" +
	"\xd5\xa1A$\xa4\xd0F1\x0aP F\x94/5\xa2" +
	"\xaaT\x11$\xa0\xa0\xaaBB5\x1f\x95\xdaP\x84\x85" +
	"*\x02\x95\x003\xe8\xce\xcc\xee\x8c7\xd9\xc4\xb4\x08\x89" +
	"_\x1e\xef\xdcy\xef\xdcs\xce\xbd\xf7\xbd[\xbe\x17\x1f" +
	"\x88\xdd\x9a\xb8\xb7\x95\x84\x9a\x8e7\xb9/\xdf|\xd0\xf9" +
	"\xe4\xe0+\x9f!\xb5\x06\xd2=\xbbwl\xaa\xf3\x17/" +
	"\xbcDqhD\x1b\xf4\xf8\x102]q\x8d(s]" +
	"\xfc<\xe1\xb7?\x9a^~s\xee\xfa#z'(\x08" +
	"A\xd3\xfd d\x12M\xfd\x04\xf7\xa7#\xa7\x97\x8a\x7f" +
	"\xf8\xf9\x11R\x9d\x10Dq\xc1\x11=M{9\xe2\xf6" +
	"\xa6\xf3\x04\xf7\xd1\xb1\xed\xbfY\xbfp\xc7\xe7\x82\x88\x18" +
	"\x07\xbcK;\xce\x01]\xda}\x04w\xef\xc1\xc5\xd7_" +
	"\x7f\xf9\x03\xc7)\xb2\xc7\xac6\xc2\x01s\x1a\xef\xf1\xe0" +
	"_>\x12\x9bM\xce\x1e\xe7\x15d\xb0\xc2\x82fq\xc0" +
	"Y\xed[\x04\xf7\xe9\x1f\x7f\xfe\xe8\xce]\xc6\x979#" +
	"\x11\xc9\xc8\x03\xb3\xb3Y c6sFF3\x03z" +
	"\x1c\x8f]\xd0>5\xf6\xb5(\xa0\xdb[\x1e\xe5\xe5\x06" +
	"[\x18\xd0\x9fSG\xe7\xfa\x0f}\xf7\x99jN\x1e\xa2" +
	"\xf9\x96]\x1c\xb1\xd0\xc2\x1b\x1e\xbd\xe1\x97\xbf\x7f\xe8\xbd" +
	"\x17~\xc0\x115\xcc\xaa\xf5\x10G|\xac\x95\xd78\xf7" +
	"\xa1\x8d\x7f\xfa\xddc\xc9\x1f\x92\xbe\x06\xf5\x1c\x9fm\xed" +
	"F\xe6g\xad\x8c\xe8'\xad\x9c\xe0\x17\xfbw\x9f\xbb\xf0" +
	"\xd9\xef?[\x8f_r\xf4\x9b\xadk\x91\xc1U\xfc\xb8" +
	"\xdc\xda\x09\x82\xfb\xb7\xb6_\xff\xaa\xaf\xe9\xc6\xb3+\xf0" +
	"\xado\xf3\x08\xd9\xd4\xc6\xf8\xae^z\xe4\x85\xdc\xfb\x86" +
	"\x9e\xab\xdb\xdd[o\xb1\xed\x1ad\x96\xdax\xf77\xbc" +
	"\xe0\xe5\xdc\xc7\x8fm\xfc\xca\xc9\xe7x\xf7\x8b\xb0\xce%" +
	"\xfa\x90y*\xc1\xd1O$8\xb1?\xce\x17^\x99\xb9" +
	"\xe7\xb5\xe7I_\x13\x81J\xd8\xb0\x9chG&\x91\xe4" +
	"\xc8\x96\xe4\x0c\xc1\xfd\xfa\xf3\x9fx\xf1K\x85\x91su" +
	"\xebn\x81\x16\x076lI^\x83\xcc\xf6\xa4G\\\xf2" +
	"^Nki1\xde\xf5\xea\xa9\x91\x17\xeb@{\"\xce" +
	"\xa7\xda\x91y&\xc5\x8b/\xa4\x18\xc6\x0e\xe7\xfe\xb7\xb6" +
	"\x8b\x13/\x91\xbeFFad\xaeM\xff=\xb3>\xcd" +
	"\xdft\xa5\xefB\xe6\xaf\xfc\xe8n\x18\xbe\xed\xaa\xa1\xc3" +
	"\x87\x17/I\xf0b\xba\x1d\x99%\xef\x937\xd2\x1e\xc1" +
	"\xdf\xee[:\xb4\xbf\xfd\xd5\x0b\x81\xe1|&\xaek?" +
	"\xc2\x04\xdf\xda~\x9e\xf2\xee\xe4\xbe\xf1\x9b-#_\x88" +
	"M{\x7f\xa6o\x1a5&K\x93}9s\xff\x94i" +
	";\x1f-;f\xd6\xa8L\x94\x8d<Q\x16Pi\x19" +
	"#\x8a\x81H7\xba\x89\xd4n\x09\xb5G\x00\xe8`\xf7" +
	"\xe8\xe6\x08\x91\xcaK\xa8I\x01]\xa0\x83E\xd5\x8b{" +
	"\x89\xd4\x84\x84\x9a\x16\xd0\xa5\xe8` \xfa\x14G:\x12" +
	"\xea\xa0@\xca1\xad\"ZH\xa0\x85\xe0\x8e\x1a\xa5|" +
	"!o8\xa4\x99\x83y\xb4\x91@\x1b\xc1\x9d0lg" +
	"ky|\x90R\xa5\xbc9]\x0b\x0e~\xdeFZt" +
	"\x89F9\xf1s.\xfb\xc1\x9b,s\xb4|\xc0\xb4\xd6" +
	"\xe5\xfaM{j\xc2\xb1U\xac\x96U\xa2\x97H5K" +
	"\xa8\x0e\x81N\xdb1\x1c\x13\xe9\x90t\x02\xd2\xabX\xbf" +
	"P\xb2M\xcbY\x975R\x96Q\xb4\xa3\x9c\xad\x0d9" +
	"\xd3k\xa4\x0d\x85\xa4A\x04\x9c1\xb9{$\x94\xc3\x9c" +
	"\xc1\xe7l?\x07NJ\xa8\x07\x04\xb4}f\x05\x09\x12" +
	"H\x10\\\xc3r\x0ac\xc6\xa8CDH\xbf\xf5\xda\xd4" +
	"7\x937\xb6,\xf8XWr;Q\x1e\x1fd\xfe8" +
	"\xb0\x9e\xacxC\xb2jNX\x97c\xbe\xa4c\xab\xe6" +
	"ZJ\xeb\x19\xe9:\x09u\x0b\xa74\xe0\xa7\xd4\xc3\xea" +
	"\xbe_B\xddV\xaf\xee\x81\xb2c\xdee\x19%\xd2\x1c" +
	"3\x0f\x90\x00VA\xa8])\x8dz\x9bkuju" +
	"\x87j\xa5\xf2\x85\xb1\xb1\xb7/V\xce\xec\xf4\xbd\xd0V" +
	"[}\xcbf\"5 \xa1\xb6F\xd4\x1a\xe4-\xef\x94" +
	"PY\xb6x \xd70+\xb3UB\xed\x10\x98\xb1\xa7" +
	"FGM\xdb\xae&\xb7z\x05\xe4J\x84\xf7TJ\xa3" +
	"[J\x8eU\xa9/\xbcwf\xa2\xde\xb0\x1a\xdf\x96\x89" +
	":\x0b+*\xf0J\xf6\xd9c\x1a\x963b\x1a\x8eo" +
	"\x1e\xc7\xf6\x14\xbb\xbc{\x98\xf7\x1b$\xd4\xc6:\xf7\xd4" +
	"S\xbb:\xdfd\x0d\xcb\x90\xc5\x15\xc2\xee\x0a5\xac\x12" +
	"8\xccH\xee\x96P\xdb\"\xadK1\xabY\x09\xb5[" +
	"\xc0-\x9a\xd6\xbe\x093W&Yv\xaa\xac\xbd\xf3\xf2" +
	"\x0a\xf9a\x9cE\xbb\x11;U\x9c=C\x8dJk\xc2" +
	"4\xf2\xa65\x98\xe7\xdd\xabm\xb3\x81\xb5r~\x03\xcc" +
	"\x1a\x95\x14\xb7v\xf6W\xa4\xa8N\x12\xa9\xb4\x84z\x8f" +
	"\xf0\x1b\xec\x87K\xe5\xfbP\x1a\xf6\xd3\xd7\xcaa\xf6\x8d" +
	"\x96\x1f\xf4J\x8a\xe7\x86\x16\xac\xdeQ[\xfdAv\xef" +
	"\xb4\x84z(\xe2\xdeOsR\x07%\xd4\xe1HQ=" +
	"\xc2M\xe4a\x09uJ\x00\xd2w\xefS\xcc\xc8\x09\x09" +
	"uZ@\x8f\xa1\x031\"}\x9e\xbf>%\xa1\xce\xac" +
	"\xde\xd2\x81\x9aY\x8b\xb4ry\x0cIBV\xc2\xfb0" +
	"\xf9\x9f\xa8z\xa5\x09\x93\xed\xf4D\x8dz\xefd\xe8\xb3" +
	"j\xfaQ\x9b\xd5\xbc\xb7\x93\xc7\xe6\x0e\x09\x95\xbf\xa2\x0c" +
	"\xfcv\x9bi\x15\xa3\x08\x1b\x0c\xcc\x06\x8ae\xadry" +
	"\xcc\x1b\xf4\xd2\x17,\x02x\xed\xa5\xba`\xef\xa5\xba`" +
	"o\x90Z~\xa5\x0e\x9d\x07\x8c\x89)\xb3\xf6\xdf\xa4u" +
	"1\xe3\x8dp\xdd]\xad\x8el\xbf\x7f\x0aal\xff\x83" +
	"\x02\x196m\xdb\x187\xb7U&az\xfe\xf5\x12\xdc" +
	"\xd4\xc7CE\xef\xe9&\x82\xd0\xbbz\x89 \xf5kG" +
	"\x88\x10\xd3\xaf\xce\x11\xf5\xfb\xb3$\xc5m\xc7O\xd3\xad" +
	"NO\xd2\xca\x8e\xe9V\x8b\x9d\xe04,M~\xf6\xb6" +
	"\x97\xe3\xde\xd6\xef\xaee{\x8c\xb3}\\B=)\x90" +
	"\x80\xeb\xfa\xf9>\xd1G\xa4\xbe\xe0\x97IB\xfc\xcb\xf5" +
	"\xa1F\x0b%!\x97]\xbf|\xe6Y\xa1'%\xd4\xd3" +
	"\x02\x89\xd8?]\xbf~\xbe\xca\x85vZB}G " +
	"\x11\xff\x87\xdb\x818\x91\xbe\x90#Rg$\xd4\xb3\xcc" +
	"ce\xd2D*<2\x13\x90\"\x04\xf9\"\x1d\x9e\xfb" +
	"\x83\x81\xc1\x0c\\<\x8b\x03\xe9\xd3\xe1\xa9>(\xc6\x15" +
	",!\x1d^\xec\x82\xf7\x11\xde\x90\x0e\x8f\xf9u\x13\xfe" +
	"\"\x0d\xfd\x0a/\x971Vg\x9b\xb5\xd1\xa9S\xf5M" +
	"o0u\xee\xacs\xefe\xfd*\xea\xd5\xeb\xf7;\x80" +
	"\xdf\xf4\xe2D\xb5{%\xaa\x97?}\xae\x8f\x84>\xab" +
	"!\xbc\x9f\xa1zs\xd4+\xdd$\xf4\xa2\x06Q\xbb\x1b" +
	"\xc1\xbb\xb7\xd2\xf5Gtc3\x09}\xbb\x06Y;\xd6" +
	"\xa3z%\xd5\x07GH\xe8wh\x88\xd5nt\xa8\xde" +
	"\x0e\xf5M9\x12z\x8f\x16\xa85\xe0\xab3\x80\x99\xa0" +
	"I\x0d\xd4\xf1?\xb0\x82\xef\x01dq\xd9#\x8a\x7f=" +
	"@}\x9b\xe7\x11\xfb\x80\x84z8B\xf1\xec\xe6\xa0\xcd" +
	"\x9f\x88t\x8dc}\x81\xab\xcf\x84m\xfe\x1b\xdd\xa1#" +
	"km~a(4\xe4%\x87\xf1\x8cYr\xac\x82i" +
	"W\xb5J\x87\xd7i\x02\xff\xd8\xefI\x19y_\xbb\xa8" +
	"\xf9\xef\xff\xbb\x87eo\x9e\xc3\xfe\xbf\xb82\xfd;\x00" +
	"\x00\xff\xff7\xaeB\xe7"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d3c5d01f75666abd,
		Nodes: []uint64{
			0x87dc497b74802fd5,
			0x92270091f1fd78bf,
			0x92cee86deda862cc,
			0x9341b129de55668a,
			0x9a3cd5e6e6dd806a,
			0x9a850e85044ff37d,
			0x9f615a599596c7ac,
			0xaa667e07f4900194,
			0xb5b6823f91950fef,
			0xb9f42084e1d12895,
			0xba0e90e0ec3446c8,
			0xbcb88ef4c85c3f9b,
			0xbd2b063ad7da0cf6,
			0xc04a2652c589ed19,
			0xc0a2a634995e52fd,
			0xc2e5537fdc69a5ea,
			0xc862699ecf5fc2ab,
			0xcf62a4e22505dded,
			0xd39c0255f77a7458,
			0xdd8c8c4a0b384d33,
			0xf4e2127182ed3ab2,
		},
		Compressed: true,
	})
}
